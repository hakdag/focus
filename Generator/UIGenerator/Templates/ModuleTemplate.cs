// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace UIGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ModuleTemplate : ModuleTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nimport { CommonModule } from \'@angular/common\';\r\nimport { FormsModule } from \'@" +
                    "angular/forms\';\r\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from \'@angular/core" +
                    "\';\r\nimport { RouterModule } from \'@angular/router\';\r\nimport { AlertModule, Toolt" +
                    "ipModule } from \'ng2-bootstrap\';\r\nimport { ButtonsModule, DropdownModule, Pagina" +
                    "tionModule  } from \'ng2-bootstrap\';\r\nimport { DataTableModule } from \"angular2-s" +
                    "erverpagination-datatable\";\r\nimport { HttpModule }    from \'@angular/http\';\r\n\r\ni" +
                    "mport { WidgetModule } from \'../layout/widget/widget.module\';\r\nimport { UtilsMod" +
                    "ule } from \'../layout/utils/utils.module\';\r\nimport { JqSparklineModule } from \'." +
                    "./components/sparkline/sparkline.module\';\r\n\r\n/*Forms*/\r\nimport { Select2Module }" +
                    " from \'ng2-select2\';\r\ndeclare var global: any;\r\n// libs\r\n/* tslint:disable */\r\nv" +
                    "ar markdown = require(\'markdown\').markdown;\r\n/* tslint:enable */\r\nglobal.markdow" +
                    "n = markdown;\r\nimport \'bootstrap-markdown/js/bootstrap-markdown.js\';\r\nimport \'bo" +
                    "otstrap-select/dist/js/bootstrap-select.js\';\r\nimport \'parsleyjs\';\r\nimport \'boots" +
                    "trap-application-wizard/src/bootstrap-wizard.js\';\r\nimport \'twitter-bootstrap-wiz" +
                    "ard/jquery.bootstrap.wizard.js\';\r\nimport \'jasny-bootstrap/docs/assets/js/vendor/" +
                    "holder.js\';\r\nimport \'jasny-bootstrap/js/fileinput.js\';\r\nimport \'ng2-datetime/src" +
                    "/vendor/bootstrap-datepicker/bootstrap-datepicker.min.js\';\r\nimport \'ng2-datetime" +
                    "/src/vendor/bootstrap-timepicker/bootstrap-timepicker.min.js\';\r\nimport \'bootstra" +
                    "p-colorpicker\';\r\nimport \'bootstrap-slider/dist/bootstrap-slider.js\';\r\nimport \'ja" +
                    "sny-bootstrap/docs/assets/js/vendor/holder.js\';\r\nimport \'jasny-bootstrap/js/file" +
                    "input.js\';\r\nimport \'jasny-bootstrap/js/inputmask.js\';\r\nimport { NKDatetimeModule" +
                    " } from \'ng2-datetime/ng2-datetime\';\r\nimport { coreModule } from \'app/core/core." +
                    "module\'\r\n\r\n");
            
            #line 45 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 foreach (var type in module.Models)
{ 
	if (type.BaseType == typeof(Enum))
	{ 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 49 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("import { ");
            
            #line 50 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("ListComponent } from \'./");
            
            #line 50 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("/");
            
            #line 50 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("-list.component\';\r\nimport { ");
            
            #line 51 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("EditComponent } from \'./");
            
            #line 51 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("/");
            
            #line 51 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("-edit.component\';\r\n");
            
            #line 52 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 } } 
            
            #line default
            #line hidden
            this.Write("  \r\n\r\nexport const routes = [\r\n");
            
            #line 55 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 for (int i=0; i < module.Models.Count; i++)
{ 
	var type = module.Models[i];
	if (type.BaseType == typeof(Enum)) continue;
	if (i==0) {
            
            #line default
            #line hidden
            this.Write("  {path: \'\', redirectTo: \'");
            
            #line 60 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("\', pathMatch: \'full\'},\r\n\t");
            
            #line 61 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  \r\n  {path: \'");
            
            #line 62 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("list\', component: ");
            
            #line 62 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("ListComponent},\r\n  {path: \'");
            
            #line 63 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("/:id\', component: ");
            
            #line 63 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("EditComponent},\r\n  {path: \'");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("\', component: ");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("EditComponent}");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 if (i < module.Models.Count - 1) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 65 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  \r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    // Components / Directives/ Pipes\r\n" +
                    "");
            
            #line 71 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 for (int i=0; i < module.Models.Count; i++)
{ 
	var type = module.Models[i];
	if (type.BaseType == typeof(Enum))
	{ 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 76 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 77 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("ListComponent,\r\n    ");
            
            #line 78 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("EditComponent");
            
            #line 78 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 if (i < module.Models.Count - 1) { 
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 78 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 80 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
 } } 
            
            #line default
            #line hidden
            this.Write(@"  
  ],
  imports: [
    coreModule,
    CommonModule,
    JqSparklineModule,
    FormsModule,
    AlertModule.forRoot(),
    TooltipModule.forRoot(),
    ButtonsModule.forRoot(),
    DropdownModule.forRoot(),
    PaginationModule.forRoot(),
    HttpModule,
    NKDatetimeModule,
    WidgetModule,
    UtilsModule,
    DataTableModule,
    Select2Module,
    RouterModule.forChild(routes)
  ],
  schemas:  [ CUSTOM_ELEMENTS_SCHEMA ]
})
export class ");
            
            #line 102 "C:\Projects\focus\Generator\UIGenerator\Templates\ModuleTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(module.ModuleName));
            
            #line default
            #line hidden
            this.Write("Module {\r\n  static routes = routes;\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ModuleTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
