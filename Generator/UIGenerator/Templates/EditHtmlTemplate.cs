// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace UIGenerator.Templates
{
    using System.Linq;
    using Focus.Common.Attributes;
    using System.ComponentModel.DataAnnotations;
    using System.Reflection;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class EditHtmlTemplate : EditHtmlTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<breadcrumb [itemId]=\"");
            
            #line 9 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Type.TypeId + 1));
            
            #line default
            #line hidden
            this.Write(@""" [lastText]=""upsertText""></breadcrumb>
<section class=""widget"" widget>
    <div class=""widget-body"">
        <div class=""row"">
            <div class=""col-lg-6"">
                <form class=""form-horizontal"" role=""form"" #form=""ngForm"" (ngSubmit)=""save(form.value, form.valid)"">
                    <fieldset *ngIf=""model"">
                        <input type=""hidden"" [(ngModel)]=""model.Id"" [value]=""model.Id"" name=""Id"" />
                        <legend>
                            <strong>{{upsertText}}</strong>
                        </legend>
                        <div *ngIf=""responseResult"" class=""form-group row"">
                            <div *ngIf=""!responseResult.success"" class=""col-md-12 alert alert-danger"">
                                <span *ngFor=""let msg of responseResult.Messages"">{{msg}}</span>
                            </div>
                            <div *ngIf=""responseResult.success"" class=""col-md-12 success alert-success"">
                                <span *ngFor=""let msg of responseResult.Messages"">{{msg}}</span>
                            </div>
                        </div>
						");
            
            #line 28 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 for(int i = 0; i < editableProperties.Length; i++)
						{
							PropertyInfo pi = editableProperties[i];
							string inputType = getInputType(pi);
							bool isRequired = isPropertyRequired(pi); 
            
            #line default
            #line hidden
            this.Write("                        <div class=\"form-group row\">\r\n                           " +
                    " <label class=\"col-md-4 col-form-label\" for=\"");
            
            #line 34 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 34 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getNamedArgument<DisplayAttribute>(pi)));
            
            #line default
            #line hidden
            this.Write("</label>\r\n                            <div class=\"col-md-8 \">\r\n\t\t\t\t\t\t\t");
            
            #line 36 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 if (inputType == "text")
							{ 
            
            #line default
            #line hidden
            this.Write("                                <input type=\"text\" ");
            
            #line 38 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isRequired ? "required" : ""));
            
            #line default
            #line hidden
            this.Write(" class=\"form-control\" id=\"");
            
            #line 38 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" [(ngModel)]=\"model.");
            
            #line 38 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" name=\"");
            
            #line 38 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" #");
            
            #line 38 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("=\"ngModel\">\r\n\t\t\t\t\t\t\t");
            
            #line 39 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 }
							else if (inputType == "bool")
							{ 
            
            #line default
            #line hidden
            this.Write("                                <div class=\"abc-checkbox abc-checkbox-info abc-ch" +
                    "eckbox-circle\">\r\n                                    <input id=\"");
            
            #line 43 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 43 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isRequired ? "required" : ""));
            
            #line default
            #line hidden
            this.Write(" type=\"checkbox\" [(ngModel)]=\"model.");
            
            #line 43 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" name=\"");
            
            #line 43 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" #");
            
            #line 43 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("=\"ngModel\">\r\n                                    <label for=\"");
            
            #line 44 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n                                    </label>\r\n                               " +
                    " </div>\r\n\t\t\t\t\t\t\t");
            
            #line 47 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 }
							else if (inputType == "int")
							{ 
            
            #line default
            #line hidden
            this.Write("                                <input type=\"number\" ");
            
            #line 50 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isRequired ? "required" : ""));
            
            #line default
            #line hidden
            this.Write(" class=\"form-control\" id=\"");
            
            #line 50 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" [(ngModel)]=\"model.");
            
            #line 50 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" name=\"");
            
            #line 50 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" #");
            
            #line 50 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("=\"ngModel\">\r\n\t\t\t\t\t\t\t");
            
            #line 51 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 }
							else if (inputType == "decimal")
							{ 
            
            #line default
            #line hidden
            this.Write("                                <input type=\"number\" ");
            
            #line 54 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isRequired ? "required" : ""));
            
            #line default
            #line hidden
            this.Write(" class=\"form-control\" id=\"");
            
            #line 54 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" [(ngModel)]=\"model.");
            
            #line 54 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" name=\"");
            
            #line 54 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" #");
            
            #line 54 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("=\"ngModel\">\r\n\t\t\t\t\t\t\t");
            
            #line 55 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 }
							else if (inputType == "adres")
							{ 
            
            #line default
            #line hidden
            this.Write("                                <select id=\"");
            
            #line 58 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 58 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isRequired ? "required" : ""));
            
            #line default
            #line hidden
            this.Write(" title=\"");
            
            #line 58 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(title));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 58 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getNamedArgument<DisplayAttribute>(pi)));
            
            #line default
            #line hidden
            this.Write(" select...\" class=\"form-control\" [(ngModel)]=\"model.");
            
            #line 58 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" name=\"");
            
            #line 58 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n                                    <option *ngFor=\"let ");
            
            #line 59 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write(" of ");
            
            #line 59 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("List\" [ngValue]=\"");
            
            #line 59 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("\">{{");
            
            #line 59 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write(" | AdresShortPipe}}</option>\r\n                                </select>\r\n\t\t\t\t\t\t\t");
            
            #line 61 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 }
							else if (inputType == "datetime")
							{ 
            
            #line default
            #line hidden
            this.Write("                                <datetime [(ngModel)]=\"model.");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" id=\"");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isRequired ? "required" : ""));
            
            #line default
            #line hidden
            this.Write(" [datepicker]=\"datepickerOpts\" name=\"");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" #");
            
            #line 64 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("=\"ngModel\"></datetime>\r\n\t\t\t\t\t\t\t");
            
            #line 65 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 }
							else if (inputType == "enum")
							{ 
            
            #line default
            #line hidden
            this.Write("                                <select id=\"");
            
            #line 68 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 68 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isRequired ? "required" : ""));
            
            #line default
            #line hidden
            this.Write(" title=\"");
            
            #line 68 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(title));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 68 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getNamedArgument<DisplayAttribute>(pi)));
            
            #line default
            #line hidden
            this.Write(" select...\" class=\"form-control\" [(ngModel)]=\"model.");
            
            #line 68 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" name=\"");
            
            #line 68 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n                                    <option *ngFor=\"let e of ");
            
            #line 69 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("List\" [ngValue]=\"e.value\">{{e.key}}</option>\r\n                                </s" +
                    "elect>\r\n\t\t\t\t\t\t\t");
            
            #line 71 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 }
							else if (IsCollection(pi.PropertyType))
							{ 
								var genericProperty = GetGenericProperty(pi.PropertyType);
								var genericPropertyName = genericProperty.Name;
								var genericPropertyNameToLower = genericPropertyName.ToLower(new System.Globalization.CultureInfo("en-EN", false));
								var searchPropertyOfGenericTypeName = GetSearchPropertyName(genericProperty);
								var searchPropertyOfGenericType = GetPropertyAttribute<SearchPropertyAttribute>(genericProperty);
								var searchPropertyTitle = getNamedArgument<DisplayAttribute>(searchPropertyOfGenericType);
								
            
            #line default
            #line hidden
            this.Write("                        <div class=\"row\">\r\n                            <div class" +
                    "=\"col-md-9\">\r\n                                <select id=\"");
            
            #line 83 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyName));
            
            #line default
            #line hidden
            this.Write("\" title=\"Select ");
            
            #line 83 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getNamedArgument<DisplayAttribute>(pi)));
            
            #line default
            #line hidden
            this.Write("...\" class=\"form-control\" name=\"");
            
            #line 83 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyName));
            
            #line default
            #line hidden
            this.Write("\" #");
            
            #line 83 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyName));
            
            #line default
            #line hidden
            this.Write(">\r\n                                    <option>Select ");
            
            #line 84 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getNamedArgument<DisplayAttribute>(pi)));
            
            #line default
            #line hidden
            this.Write("...</option>\r\n                                    <option *ngFor=\"let ");
            
            #line 85 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyNameToLower));
            
            #line default
            #line hidden
            this.Write(" of ");
            
            #line 85 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyNameToLower));
            
            #line default
            #line hidden
            this.Write("List\" [value]=\"");
            
            #line 85 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyNameToLower));
            
            #line default
            #line hidden
            this.Write(".Id\">{{");
            
            #line 85 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyNameToLower));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 85 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(searchPropertyOfGenericTypeName));
            
            #line default
            #line hidden
            this.Write("}}</option>\r\n                                </select>\r\n                         " +
                    "   </div>\r\n                            <div class=\"col-md-3\">\r\n                 " +
                    "               <button type=\"button\" class=\"btn btn-success\" (click)=\"add");
            
            #line 89 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 89 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyName));
            
            #line default
            #line hidden
            this.Write(@".value)"">Add</button>
                            </div>
                        </div>
                        <div class=""row"">
                            <div class=""col-md-12"">
                                <div class=""table-responsive"">
                                    <table class=""table table-striped table-hover"">
                                        <thead>
                                            <tr>
                                                <th>");
            
            #line 98 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(searchPropertyTitle));
            
            #line default
            #line hidden
            this.Write(@"</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr *ngFor=""let ");
            
            #line 103 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyNameToLower));
            
            #line default
            #line hidden
            this.Write(" of model.");
            
            #line 103 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n                                                <td>{{");
            
            #line 104 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyNameToLower));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 104 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(searchPropertyOfGenericTypeName));
            
            #line default
            #line hidden
            this.Write("}}</td>\r\n                                                <td>\r\n                  " +
                    "                                  <a class=\"btn btn-default btn-sm mb-xs\" role=\"" +
                    "button\" title=\"Remove\" (click)=\"remove");
            
            #line 106 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 106 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericPropertyNameToLower));
            
            #line default
            #line hidden
            this.Write(@".Id)"">
                                                        <i class=""glyphicon glyphicon-remove-circle text-danger""></i>
                                                        Remove
                                                    </a>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
							");
            
            #line 117 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 }
							else if (inputType != null)
							{ 
            
            #line default
            #line hidden
            this.Write("                                <select id=\"");
            
            #line 120 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 120 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(isRequired ? "required" : ""));
            
            #line default
            #line hidden
            this.Write(" title=\"");
            
            #line 120 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(title));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 120 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getNamedArgument<DisplayAttribute>(pi)));
            
            #line default
            #line hidden
            this.Write(" select...\" class=\"form-control\" [(ngModel)]=\"model.");
            
            #line 120 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\" name=\"");
            
            #line 120 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.Name));
            
            #line default
            #line hidden
            this.Write("\">\r\n                                    <option *ngFor=\"let ");
            
            #line 121 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write(" of ");
            
            #line 121 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("List\" [ngValue]=\"");
            
            #line 121 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write("\">{{");
            
            #line 121 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false))));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 121 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getPropertyAttributeName<SearchPropertyAttribute>(pi)));
            
            #line default
            #line hidden
            this.Write("}}</option>\r\n                                </select>\r\n\t\t\t\t\t\t\t");
            
            #line 123 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                            </div>\r\n                        </div>\r\n\t\t\t\t\t\t");
            
            #line 126 "C:\Projects\focus\Generator\UIGenerator\Templates\EditHtmlTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"                    </fieldset>
                    <div class=""form-actions"">
                        <div class=""row"">
                            <div class=""offset-md-4 col-md-7 "">
                                <button type=""submit"" class=""btn btn-primary"">Save</button>
                                <button type=""button"" class=""btn btn-inverse"" (click)=""cancel(form.touched)"">Cancel</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
      </div>
</section>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class EditHtmlTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
