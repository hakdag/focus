<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Focus.Common.Attributes" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<breadcrumb [itemId]="<#= Type.TypeId + 1 #>" [lastText]="upsertText"></breadcrumb>
<section class="widget" widget>
    <div class="widget-body">
        <div class="row">
            <div class="col-lg-6">
                <form class="form-horizontal" role="form" #form="ngForm" (ngSubmit)="save(form.value, form.valid)">
                    <fieldset *ngIf="model">
                        <input type="hidden" [(ngModel)]="model.Id" [value]="model.Id" name="Id" />
                        <legend>
                            <strong>{{upsertText}}</strong>
                        </legend>
                        <div *ngIf="responseResult" class="form-group row">
                            <div *ngIf="!responseResult.success" class="col-md-12 alert alert-danger">
                                <span *ngFor="let msg of responseResult.Messages">{{msg}}</span>
                            </div>
                            <div *ngIf="responseResult.success" class="col-md-12 success alert-success">
                                <span *ngFor="let msg of responseResult.Messages">{{msg}}</span>
                            </div>
                        </div>
						<# for(int i = 0; i < editableProperties.Length; i++)
						{
							PropertyInfo pi = editableProperties[i];
							string inputType = getInputType(pi);
							bool isRequired = isPropertyRequired(pi); #>
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label" for="<#= pi.Name #>"><#= getNamedArgument<DisplayAttribute>(pi) #></label>
                            <div class="col-md-8 ">
							<# if (inputType == "text")
							{ #>
                                <input type="text" <#= isRequired ? "required" : "" #> class="form-control" id="<#= pi.Name #>" [(ngModel)]="model.<#= pi.Name #>" name="<#= pi.Name #>" #<#= pi.Name #>="ngModel">
							<# }
							else if (inputType == "bool")
							{ #>
                                <div class="abc-checkbox abc-checkbox-info abc-checkbox-circle">
                                    <input id="<#= pi.Name #>" <#= isRequired ? "required" : "" #> type="checkbox" [(ngModel)]="model.<#= pi.Name #>" name="<#= pi.Name #>" #<#= pi.Name #>="ngModel">
                                    <label for="<#= pi.Name #>">
                                    </label>
                                </div>
							<# }
							else if (inputType == "int")
							{ #>
                                <input type="number" <#= isRequired ? "required" : "" #> class="form-control" id="<#= pi.Name #>" [(ngModel)]="model.<#= pi.Name #>" name="<#= pi.Name #>" #<#= pi.Name #>="ngModel">
							<# }
							else if (inputType == "decimal")
							{ #>
                                <input type="number" <#= isRequired ? "required" : "" #> class="form-control" id="<#= pi.Name #>" [(ngModel)]="model.<#= pi.Name #>" name="<#= pi.Name #>" #<#= pi.Name #>="ngModel">
							<# }
							else if (inputType == "adres")
							{ #>
                                <select id="<#= pi.Name #>" <#= isRequired ? "required" : "" #> title="<#= title #> <#= getNamedArgument<DisplayAttribute>(pi) #> select..." class="form-control" [(ngModel)]="model.<#= pi.Name #>" name="<#= pi.Name #>">
                                    <option *ngFor="let <#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #> of <#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #>List" [ngValue]="<#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #>">{{<#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #> | AdresShortPipe}}</option>
                                </select>
							<# }
							else if (inputType == "datetime")
							{ #>
                                <datetime [(ngModel)]="model.<#= pi.Name #>" id="<#= pi.Name #>" <#= isRequired ? "required" : "" #> [datepicker]="datepickerOpts" name="<#= pi.Name #>" #<#= pi.Name #>="ngModel"></datetime>
							<# }
							else if (inputType == "enum")
							{ #>
                                <select id="<#= pi.Name #>" <#= isRequired ? "required" : "" #> title="<#= title #> <#= getNamedArgument<DisplayAttribute>(pi) #> select..." class="form-control" [(ngModel)]="model.<#= pi.Name #>" name="<#= pi.Name #>">
                                    <option *ngFor="let e of <#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #>List" [ngValue]="e.value">{{e.key}}</option>
                                </select>
							<# }
							else if (IsCollection(pi.PropertyType))
							{ 
								var genericProperty = GetGenericProperty(pi.PropertyType);
								var genericPropertyName = genericProperty.Name;
								var genericPropertyNameToLower = genericPropertyName.ToLower(new System.Globalization.CultureInfo("en-EN", false));
								var searchPropertyOfGenericTypeName = GetSearchPropertyName(genericProperty);
								var searchPropertyOfGenericType = GetPropertyAttribute<SearchPropertyAttribute>(genericProperty);
								var searchPropertyTitle = getNamedArgument<DisplayAttribute>(searchPropertyOfGenericType);
								#>
                        <div class="row">
                            <div class="col-md-9">
                                <select id="<#= genericPropertyName #>" title="Select <#= getNamedArgument<DisplayAttribute>(pi) #>..." class="form-control" name="<#= genericPropertyName #>" #<#= genericPropertyName #>>
                                    <option>Select <#= getNamedArgument<DisplayAttribute>(pi) #>...</option>
                                    <option *ngFor="let <#= genericPropertyNameToLower #> of <#= genericPropertyNameToLower #>List" [value]="<#= genericPropertyNameToLower #>.Id">{{<#= genericPropertyNameToLower #>.<#= searchPropertyOfGenericTypeName #>}}</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <button type="button" class="btn btn-success" (click)="add<#= pi.Name #>(<#= genericPropertyName #>.value)">Add</button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th><#= searchPropertyTitle #></th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr *ngFor="let <#= genericPropertyNameToLower #> of model.<#= pi.Name #>">
                                                <td>{{<#= genericPropertyNameToLower #>.<#= searchPropertyOfGenericTypeName #>}}</td>
                                                <td>
                                                    <a class="btn btn-default btn-sm mb-xs" role="button" title="Remove" (click)="remove<#= pi.Name #>(<#= genericPropertyNameToLower #>.Id)">
                                                        <i class="glyphicon glyphicon-remove-circle text-danger"></i>
                                                        Remove
                                                    </a>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
							<# }
							else if (inputType != null)
							{ #>
                                <select id="<#= pi.Name #>" <#= isRequired ? "required" : "" #> title="<#= title #> <#= getNamedArgument<DisplayAttribute>(pi) #> select..." class="form-control" [(ngModel)]="model.<#= pi.Name #>" name="<#= pi.Name #>">
                                    <option *ngFor="let <#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #> of <#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #>List" [ngValue]="<#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #>">{{<#= pi.PropertyType.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #>.<#= getPropertyAttributeName<SearchPropertyAttribute>(pi) #>}}</option>
                                </select>
							<# } #>
                            </div>
                        </div>
						<# } #>
                    </fieldset>
                    <div class="form-actions">
                        <div class="row">
                            <div class="offset-md-4 col-md-7 ">
                                <button type="submit" class="btn btn-primary">Save</button>
                                <button type="button" class="btn btn-inverse" (click)="cancel(form.touched)">Cancel</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
      </div>
</section>